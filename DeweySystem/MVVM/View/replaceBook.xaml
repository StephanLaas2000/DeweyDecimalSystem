<UserControl x:Class="DeweySystem.MVVM.View.replaceBook"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:DeweySystem.MVVM.View"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>

        <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="Black"/>
        <ControlTemplate x:Key="roundedListBox" TargetType="{x:Type ListBox}">
            <Border x:Name="Bd" CornerRadius="10" Background="{TemplateBinding Background}" BorderThickness="5" BorderBrush="DarkCyan" Padding="1" SnapsToDevicePixels="true">
                <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </ScrollViewer>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <ControlTemplate x:Key="roundedTextBox" TargetType="{x:Type TextBoxBase}">
            <Border x:Name="border" CornerRadius="10" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="roundedButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="4"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="10" x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ProgressBar.Progress" Color="	#6082B6"/>
        <SolidColorBrush x:Key="ProgressBar.Background" Color="BlueViolet"/>
        <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>

        <Style x:Key="CornerRadius" TargetType="{x:Type ProgressBar}">
            <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
            <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="TemplateRoot">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate"/>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                            </PointAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                            <Rectangle x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="10" RadiusY="10"/>
                                <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" RadiusX="10" RadiusY="10">
                                    <Rectangle.RenderTransform>
                                        <RotateTransform Angle="-90"/>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ColorTextBlock" TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="TextTrimming" Value="None"/>
        </Style>


    </UserControl.Resources>

    <Border CornerRadius="20" Background="#272537">
        <Grid Margin="0,20,0,-20">

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <ListBox Padding="10" Width="150" Height="290" FontSize="16" FontWeight="Bold"  Template="{DynamicResource roundedListBox}" x:Name="lbSend" PreviewMouseLeftButtonDown="lbSend_PreviewMouseLeftButtonDown" Margin="196,58,470,241"/>
            <ListBox Padding="10" Width="150" Height="290" FontSize="16" FontWeight="Bold" Template="{DynamicResource roundedListBox}" x:Name="lbRec" Drop="lbRec_Drop" AllowDrop="True" Margin="409,58,257,241" />

            <Button  FontSize="15" FontWeight="Bold" Width="50" Height="40" Background="#272537" BorderThickness="0" HorizontalAlignment="Left" Margin="600,60,0,0" VerticalAlignment="Top" Click="Button_Up">
                <Image Height="40" Width="50" Source="ViewImages/up-arrow.png"  Stretch="Fill"/>
            </Button>

            <Button FontSize="15" FontWeight="Bold" Width="50" Height="40" BorderThickness="0" Background="#272537" HorizontalAlignment="Left" Margin="600,169,0,0" VerticalAlignment="Top" Click="Button_Down">
                <Image Height="40" Width="50" Source="ViewImages/down-arrow.png"  Stretch="Fill"/>
            </Button>

            <Button FontSize="15" FontWeight="Bold" Width="60" Height="60" Background="#272537" BorderThickness="0" HorizontalAlignment="Left" Margin="229,360,0,0" VerticalAlignment="Top" Click="Button_reset">
                <Image Height="60" Width="60" Source="ViewImages/reset.png"  Stretch="Fill"/>
            </Button>

            <Button x:Name="btnSubmit" FontSize="15" FontWeight="Bold" Width="65" Height="60" Background="#272537" BorderThickness="0" HorizontalAlignment="Left" Margin="450,360,0,0" VerticalAlignment="Top" Click="Button_Submit">
                <Image Height="60" Width="60" Source="ViewImages/submit.png"  Stretch="Fill"/>
            </Button>

            <ProgressBar Maximum="3" Style="{DynamicResource CornerRadius}" BorderBrush="Black" x:Name="pbCorrectAnswer" HorizontalAlignment="Left" Height="47" Margin="-10,189,0,0" VerticalAlignment="Top" Width="250" RenderTransformOrigin="0.5,0">
                <ProgressBar.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="-90"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </ProgressBar.RenderTransform>
                <ProgressBar.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="0:0:1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                  Value="-200">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <BounceEase />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ProgressBar.Triggers>
            </ProgressBar>

            <TextBlock Foreground="White" Style="{DynamicResource ColorTextBlock}" FontSize="30" FontWeight="Bold" HorizontalAlignment="Left" Margin="239,-18,0,557" TextWrapping="Wrap" Text="Replace Book Exercise">
                <TextBlock.RenderTransform>
                    <TranslateTransform/>
                </TextBlock.RenderTransform>
                <TextBlock.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="0:0:1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                  Value="20">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <BounceEase />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </TextBlock.Triggers>
            </TextBlock>

            <TextBlock Foreground="White" Style="{DynamicResource ColorTextBlock}" FontSize="18" x:Name="txtScorePer" HorizontalAlignment="Left" Margin="120,120,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5">
                <TextBlock.RenderTransform>
                    <TranslateTransform/>
                </TextBlock.RenderTransform>
                <TextBlock.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="0:0:1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                  Value="50">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <BounceEase />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </TextBlock.Triggers>
            </TextBlock>

            <TextBlock Foreground="White" Style="{DynamicResource ColorTextBlock}" FontSize="18" FontWeight='Bold' x:Name="txtScore" HorizontalAlignment="Left" Margin="20,130,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5">
                <TextBlock.RenderTransform>
                    <TranslateTransform />
                </TextBlock.RenderTransform>
                <TextBlock.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="0:0:1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                  Value="40">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <BounceEase />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </TextBlock.Triggers>
                <TextBlock.Effect>

                    <DropShadowEffect BlurRadius="10"
                                                  ShadowDepth="1"
                                                  Direction="-90"
                                                  Color="White" />

                </TextBlock.Effect>
            </TextBlock>

            <TextBlock HorizontalAlignment="Left" Margin="361,64,0,0" FontWeight="Bold" FontSize="15" TextWrapping="Wrap" Text="Hint" Foreground="white" VerticalAlignment="Top" Width="33">
                <TextBlock.ToolTip>
                    <ToolTip FontWeight="Bold" FontSize="15" Content="Drag the items on the left into the box on the right in ascending order."/>
                </TextBlock.ToolTip>
            </TextBlock>

            <TextBlock HorizontalAlignment="Left" Margin="680,70,0,0" Foreground="White" TextWrapping="Wrap" FontSize="18" Text="Up" VerticalAlignment="Top">
                <TextBlock.Effect>

                    <DropShadowEffect BlurRadius="10"
                                                  ShadowDepth="1"
                                                  Direction="-90"
                                                  Color="White" />

                </TextBlock.Effect>
            </TextBlock>


            <TextBlock HorizontalAlignment="Left" Margin="680,180,0,0" TextWrapping="Wrap" Foreground="White" FontSize="18" Text="Down" VerticalAlignment="Top">
                <TextBlock.Effect>

                    <DropShadowEffect BlurRadius="10"
                                                  ShadowDepth="1"
                                                  Direction="-90"
                                                  Color="White" />

                </TextBlock.Effect>
            </TextBlock>
            
            <TextBlock x:Name="txtLevelComplete" Foreground="White" HorizontalAlignment="Left" Margin="280,420,0,0" TextWrapping="Wrap" Text="" FontSize="15" VerticalAlignment="Top">
                <TextBlock.RenderTransform>
                    <TranslateTransform />
                </TextBlock.RenderTransform>
                <TextBlock.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="0:0:1">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:1"
                                                  Value="40">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <BounceEase />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </TextBlock.Triggers>
                <TextBlock.Effect>

                    <DropShadowEffect BlurRadius="10"
                                                  ShadowDepth="1"
                                                  Direction="-90"
                                                  Color="White" />

                </TextBlock.Effect>
            </TextBlock>





        </Grid>
    </Border>
</UserControl>
